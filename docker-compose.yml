version: '3.7'

services:
  dfh-nginx:
    image: nginx:alpine
    container_name: dfh-nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./config/nginx/includes:/etc/nginx/includes
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./src:/var/www
      - ./data/coingecko:/var/cache/nginx/coingecko
    depends_on:
      - dfh-prerenderer
    networks:
      defihelper:
        aliases:
          - scanner.defihelper.io
          - backend.defihelper.io
          - coingecko.defihelper.io
          - adapters.defihelper.io
          - stats.defihelper.io
          - adapters-local.defihelper.io
          - staking-oracle.defihelper.io
          - backend-local.defihelper.io
          - scanner-local.defihelper.io
          - stats-local.defihelper.io

  dfh-backend:
    image: node:16-alpine
    container_name: dfh-backend
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-backend:/home/node/app
      - ./config/defihelper-backend.env:/home/node/app/.env
      - ./config:/config
    command: /bin/sh -c "apk add python3 build-base && npm ci && npm run build && npm run start"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

 # docker-compose up -d --scale dfh-backend-queue=5 dfh-backend-queue
  dfh-backend-queue:
    image: node:16-alpine
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-backend:/home/node/app
      - ./config/defihelper-backend.env:/home/node/app/.env
      - ./config:/config
    command: /config/wait-for.sh dfh-backend:9000 -t 120 -- /bin/sh -c "npm run queue-consume -- -q tasks_default"
    environment:
      NODE_ENV: production
    depends_on:
      - dfh-backend
    networks:
      defihelper:

  # docker-compose up -d --scale dfh-backend-queue=5 dfh-backend-queue
  dfh-backend-metrics:
    image: node:16-alpine
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-backend:/home/node/app
      - ./config/defihelper-backend.env:/home/node/app/.env
      - ./config:/config
    command: /config/wait-for.sh dfh-backend:9000 -t 120 -- /bin/sh -c "npm run queue-consume -- -q tasks_metricCurrent"
    environment:
      NODE_ENV: production
    depends_on:
      - dfh-backend
    networks:
      defihelper:

  # docker-compose up -d --scale dfh-backend-queue=5 dfh-backend-queue
  dfh-backend-metrics-history:
    image: node:16-alpine
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-backend:/home/node/app
      - ./config/defihelper-backend.env:/home/node/app/.env
      - ./config:/config
    command: /config/wait-for.sh dfh-backend:9000 -t 120 -- /bin/sh -c "npm run queue-consume -- -q tasks_metricHistory"
    environment:
      NODE_ENV: production
    depends_on:
      - dfh-backend
    networks:
      defihelper:

  dfh-backend-queue-deferred:
    image: node:16-alpine
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-backend:/home/node/app
      - ./config/defihelper-backend.env:/home/node/app/.env
      - ./config:/config
    command: /config/wait-for.sh dfh-backend:9000 -t 120 -- /bin/sh -c "npm run queue-deferred -- -i 5 -l 1000"
    environment:
      NODE_ENV: production
    depends_on:
      - dfh-backend
    networks:
      defihelper:

  dfh-scanner:
    image: node:16-alpine
    container_name: dfh-scanner
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-scanner:/home/node/app
      - ./config/defihelper-scanner.env:/home/node/app/.env
      - ./config:/config
    command: /bin/sh -c "npm ci && npm run server-build && npm run website-build && npm run start"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  # docker-compose up -d --scale dfh-scanner-queue=5 dfh-scanner-queue
  dfh-scanner-queue:
    image: node:16-alpine
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-scanner:/home/node/app
      - ./config/defihelper-scanner.env:/home/node/app/.env
      - ./config:/config
    command: /config/wait-for.sh dfh-scanner:9002 -t 120 -- /bin/sh -c "npm run queue"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-adapters:
    image: node:16-alpine
    container_name: dfh-adapters
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-adapters:/home/node/app
      - ./config/defihelper-adapters.env:/home/node/app/.env
    command: /bin/sh -c "apk add python3 build-base && npm ci && npm run adapters:build && npm run adapters-ts:build && npm run client:build && npm run server"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-staking-oracle:
    image: node:16-alpine
    container_name: dfh-staking-oracle
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-staking-oracle:/home/node/app
    command: /bin/sh -c "npm ci && npm run server -- --port 9003"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-stats:
    image: node:16-alpine
    container_name: dfh-stats
    working_dir: /home/node/app
    restart: unless-stopped
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-stats:/home/node/app
      - ./config/defihelper-stats.env:/home/node/app/.env
    command: /bin/sh -c "npm ci && npm run build && npm run start"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-build-website:
    image: node:16-alpine
    container_name: dfh-build-website
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-website:/home/node/app
      - ./config/defihelper-website.env:/home/node/app/.env
    command: /bin/sh -c "apk add git && npm ci && npm run build"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-build-app:
    image: node:16-alpine
    container_name: dfh-build-app
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-app:/home/node/app
      - ./config/defihelper-app.env:/home/node/app/.env
    command: /bin/sh -c "npm ci && npm run build"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-redis:
    image: redis:6.2.4-alpine
    container_name: dfh-redis
    restart: unless-stopped
    networks:
      defihelper:

  dfh-redisadmin:
    image: erikdubbelboer/phpredisadmin
    container_name: dfh-redisadmin
    restart: unless-stopped
    environment:
      REDIS_1_HOST: dfh-redis
    networks:
      defihelper:

  dfh-postgres:
    image: postgres:12.1
    container_name: dfh-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: development
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: development
      PGDATA: /data/postgres
#    ports:
#      - 5432:5432
    volumes:
      - ./data/postgres:/data/postgres
      - ./pgsql/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      defihelper:

  dfh-pgadmin:
    image: dpage/pgadmin4:6.1
    container_name: dfh-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@defihelper.io
      PGADMIN_DEFAULT_PASSWORD: dev
    volumes:
      - ./pgsql/servers.json:/pgadmin4/servers.json
    networks:
      defihelper:

  dfh-prerenderer:
    image: tvanro/prerender-alpine
    container_name: dfh-prerenderer
    restart: unless-stopped
    environment:
      - MEMORY_CACHE=0
      - CACHE_MAXSIZE=1000
      - CACHE_TTL=6000
    networks:
      defihelper:

  dfh-rabbitmq:
    image: rabbitmq:management-alpine
    container_name: dfh-rabbitmq
    restart: unless-stopped
    volumes:
      - ./config/rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.8.0.ez:/opt/rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.8.0.ez
      - ./config/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      defihelper:

volumes:
  node_modules:

networks:
  defihelper:
