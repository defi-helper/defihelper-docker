version: '3.7'

services:
  dfh-nginx:
    image: nginx:alpine
    container_name: dfh-nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./config/nginx/includes:/etc/nginx/includes
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./src:/var/www
      - ./data/coingecko:/var/cache/nginx/coingecko
    networks:
      defihelper:
        aliases:
          - adapters-local.defihelper.info
          - backend-local.defihelper.info
          - scanner-local.defihelper.info
          - watcher-local.defihelper.info
          - stats-local.defihelper.info

  dfh-backend:
    image: node:16-alpine
    container_name: dfh-backend
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-backend:/home/node/app
      - ./config/defihelper-backend.env:/home/node/app/configuration/.env
      - ./config:/config
    command: /bin/sh -c "npm run start"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-watcher:
    image: node:16-alpine
    container_name: dfh-watcher
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-watcher:/home/node/app
      - ./config/defihelper-watcher.env:/home/node/app/.env
      - ./config:/config
    command: /bin/sh -c "npm run start"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-adapters:
    image: node:16-alpine
    container_name: dfh-adapters
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-adapters:/home/node/app
      - ./config/defihelper-adapters.env:/home/node/app/.env
      - ./config:/config
    command: /bin/sh -c "npm run server"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-staking-oracle:
    image: node:16-alpine
    container_name: dfh-staking-oracle
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-staking-oracle:/home/node/app
    command: /bin/sh -c "npm run server"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-stats:
    image: node:16-alpine
    container_name: dfh-stats
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-stats:/home/node/app
      - ./config/defihelper-stats.env:/home/node/app/.env
    command: /bin/sh -c "npm run start"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-redis:
    image: redis:6.2.4-alpine
    container_name: dfh-redis
    networks:
      defihelper:

  dfh-redisadmin:
    image: erikdubbelboer/phpredisadmin
    container_name: dfh-redisadmin
    environment:
      REDIS_1_HOST: dfh-redis
    networks:
      defihelper:

  dfh-postgres:
    image: postgres:14
    container_name: dfh-postgres
    environment:
      POSTGRES_USER: development
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: development
      PGDATA: /data/postgres
#    ports:
#      - 5432:5432
    volumes:
      - ./pgsql:/db.backup
      - dfh-postgres:/data/postgres
      - ./pgsql/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      defihelper:

  dfh-pgadmin:
    image: dpage/pgadmin4:6.1
    container_name: dfh-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@defihelper.info
      PGADMIN_DEFAULT_PASSWORD: dev
    volumes:
      - ./pgsql/servers.json:/pgadmin4/servers.json
    networks:
      defihelper:

  dfh-rabbitmq:
    image: rabbitmq:management-alpine
    container_name: dfh-rabbitmq
    volumes:
      - ./config/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      defihelper:

  dfh-build-website:
    image: node:16-alpine
    container_name: dfh-build-website
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-website:/home/node/app
      - ./config/defihelper-website.env:/home/node/app/.env
    command: /bin/sh -c "apk add python3 build-base git && npm run build"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

  dfh-build-app:
    image: node:16-alpine
    container_name: dfh-build-app
    working_dir: /home/node/app
    volumes:
      - node_modules:/root/.npm
      - ./src/defihelper-app:/home/node/app
      - ./config/defihelper-app.env:/home/node/app/.env
    command: /bin/sh -c "apk add python3 build-base git && npm run codegen && npm run build"
    environment:
      NODE_ENV: production
    networks:
      defihelper:

volumes:
  node_modules:
  dfh-postgres:

networks:
  defihelper:
